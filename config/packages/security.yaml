security:
    encoders:
        App\Entity\User:
          algorithm: bcrypt

    role_hierarchy:
        ROLE_ADMIN: [ROLE_MANAGE]
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        our_users:
          entity: { class: App\Entity\User, property: email}

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
          pattern: ^/api
          stateless: true
          anonymous: true
          json_login:
              #Here authentication will happen (token generation)
              check_path: /api/login_check
              #Handle successfull authentication
              success_handler: lexik_jwt_authentication.handler.authentication_success
              #Handle authentication failure(invalid credentials, no credentials)
              failure_handler: lexik_jwt_authentication.handler.authentication_failure
          guard:
              authenticators:
#                  - lexik_jwt_authentication.jwt_token_authenticator
                  - App\Security\TokenAuthenticator
          user_checker: App\Security\UserEnabledChecker
        main:
            anonymous: true
            guard:
              authenticators:
                - App\Security\LoginFormAuthenticator

            logout:
              path: /logout

            switch_user: ~

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin,   roles: ROLE_ADMIN }
         - { path: ^/profile, roles: ROLE_USER }
         - { path: ^/api,     roles: IS_AUTHENTICATED_ANONYMOUSLY }
